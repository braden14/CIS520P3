
CIS 520 - Programming Project #1

                   
---- GROUP ----

>> Fill in the names and email addresses of your group members.

Braden Schroeder braden14@ksu.edu
Nils Peterson nils@ksu.edu 
Caleb Holland dakweezy@ksu.edu

---- PRELIMINARIES ----

>> If you have any preliminary comments on your submission, notes for
>> the TA, or extra credit, please give them here.



>> Please cite any offline or online sources you consulted while
>> preparing your submission, other than the Pintos documentation,
>> course text, lecture notes, and course staff.

	--https://web.stanford.edu/class/cs140/projects/pintos/pintos_6.html
	--https://github.com/yuan901202/pintos_1/tree/master/pintos
	--https://github.com/microdog/pintos-project-1

                 ALARM CLOCK
                 ===========

---- DATA STRUCTURES ----

>> A1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.

1)
	struct thread
	  {
		/* Owned by thread.c. */
		tid_t tid;                          /* Thread identifier. */
		enum thread_status status;          /* Thread state. */
		char name[16];                      /* Name (for debugging purposes). */
		uint8_t *stack;                     /* Saved stack pointer. */
		int priority;                       /* Priority. */
		struct list_elem allelem;           /* List element for all threads list. */

		/* Shared between thread.c and synch.c. */
		struct list_elem elem;              /* List element. */
		
		int64_t wakeup; 	<- Added this property to the thread struct

	#ifdef USERPROG
		/* Owned by userprog/process.c. */
		uint32_t *pagedir;                  /* Page directory. */
	#endif

		/* Owned by thread.c. */
		unsigned magic;                     /* Detects stack overflow. */
	  }; 
  
  -- We added wakeup to store when a thread should be woken up.  Also helps with 
  sorting of wait_list.
  
2)
	struct list wait_list;

 -- This list is used to store waiting threads. It is sorted by the time at which
 they should wake up.

---- ALGORITHMS ----

>> A2: Briefly describe what happens in a call to your timer_sleep(),
>> including the effects of the timer interrupt handler.

1) First, the algorithm insures that there are ticks to be waited on, and that
interrupts are off.  We get the current thread, and set the intr_level to disabled.  
We set the wakeup time of the time when it should awaken, then we insert the thread into the
wait list in the position where it should wake (this uses a new function, sort_thread).  Now that the  
thread is in position, we block it and return the interrupt level to its previous state. 

2) While the interrupt level is turned off, the timer interrupt handler cannot be called.
This protects the wait_list and its criticality. 

>> A3: What steps are taken to minimize the amount of time spent in
>> the timer interrupt handler?

1) The contents of wait list have previously been sorted by tick wakeup time. 
Therefore, when we iterate through and reach a thread that is not ready, we can break
out of our while loop.  

---- SYNCHRONIZATION ----

>> A4: How are race conditions avoided when multiple threads call
>> timer_sleep() simultaneously?

	-- timer_sleep() can only be ran when interrupts are turned on. At the beginning of the Timer 
	Sleep function, we turn off interrupts, so that only one instance of timer_sleep can be running at once.
	When it is done running, it resets the interrupt level to its previous state and it can now run again.  
	This prevents race conditions within timer sleep as only one instance of the function can use wait_list
	at one time.

>> A5: How are race conditions avoided when a timer interrupt occurs
>> during a call to timer_sleep()?

	-- The solution to this is the exact same as the solution to timer_sleep() being ran twice.  When timer_sleep() is 
	running, interrupts have been turned off.  Additionally, in order for timer_interupt() to run, interrupts should be 
	turned on, however when timer_sleep() is running, it will not.  Out of all calls to timer_sleep() or timer_interupt() 
	only one can be running at once.  This protects the critical sections both containing the wait_list(). 

---- RATIONALE ----

>> A6: Why did you choose this design?  In what ways is it superior to
>> other designs that you considered?

	-- We choose to implement a waiting list for our design because it allowed us to
	easily keep track of the threads that were waiting.  Also, the way that we sorted them 
	by wakeup time made it easy to iterate and find ready threads. Its simplicity makes it superior 
	to other designs.  

             PRIORITY SCHEDULING
             ===================

---- DATA STRUCTURES ----

>> B1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.

1) In thread.h, we modified the thread struct:

	struct thread
	  {
		/* Owned by thread.c. */
		tid_t tid;                          /* Thread identifier. */
		enum thread_status status;          /* Thread state. */
		char name[16];                      /* Name (for debugging purposes). */
		uint8_t *stack;                     /* Saved stack pointer. */
		int priority;                       /* Priority. */
		struct list_elem allelem;           /* List element for all threads list. */

		/* Shared between thread.c and synch.c. */
		struct list_elem elem;              /* List element. */

		int64_t wakeup;
		
		struct lock * wait_on_lock;				<- Added these 4 properties to the thread struct
		struct list donate_list;				<-
		struct list_elem donate_list_elem;		<-
		int initial_priority;					<-

	#ifdef USERPROG
		/* Owned by userprog/process.c. */
		uint32_t *pagedir;                  /* Page directory. */
	#endif

		/* Owned by thread.c. */
		unsigned magic;                     /* Detects stack overflow. */
	  };
  
	-- These properties are used to keep track of priority donation.

2) In thread.c, we added a maximum depth constant:
	
	#define PRI_DONATE_MAX_DEPTH 8
  
	-- This is used to provide a depth limit to priority donation. It can't go more than 8 levels deep.

>> B2: Explain the data structure used to track priority donation.

The thread structure has a priority-ordered list of threads within it to keep track of priority donation. This list contains all the 
threads that are within the "waiting chain" of that thread.

---- ALGORITHMS ----

>> B3: How do you ensure that the highest priority thread waiting for
>> a lock, semaphore, or condition variable wakes up first?

When threads are being added to the ready queue, they are inserted in order based on priority.
This happens in thread_yield, thread_unblock, and lock_acquire. Then, when the scheduler is looking for a new task
to run, the highest-priority tasks will be at the front of the queue. 

>> B4: Describe the sequence of events when a call to lock_acquire()
>> causes a priority donation.  How is nested donation handled?

The thread that holds the lock gets the current thread inserted into it's priority donation list in order based on priority. 
The actual donation happens in donate_priority when the the priority list is iterated through and lower-priority threads are
given the higher priority of the thread waiting on them.

>> B5: Describe the sequence of events when lock_release() is called
>> on a lock that a higher-priority thread is waiting for.

When the lock is released, then the higher priority thread will acquire the lock and do it's work. If the higher-priority thread had 
donated its priority to the thread that just released the lock, then it's original priority is restored in update_priority().

---- SYNCHRONIZATION ----

>> B6: Describe a potential race in thread_set_priority() and explain
>> how your implementation avoids it.  Can you use a lock to avoid
>> this race?

Two threads could potentially attempt to alter the priority of the same thread at the same time if they are both wanting to
donate their priority to it. We avoid this by locking down the critical section of this function with an interrupt disable and
only doing priority donation if the thread has a lower priority than the thread trying to donate to it. 

---- RATIONALE ----

>> B7: Why did you choose this design?  In what ways is it superior to
>> another design you considered?

We chose this design for our project because it is relatively simple and the way this implementation interacted with the queue structure 
makes a lot of sense to us. There are likely better implementations out there, as we don't quite pass every test, 
and if we had more time we would have liked to explore those. However, we felt that we could accomplish the task at hand using this
implementation, and we (mostly) did that. 

              ADVANCED SCHEDULER [EXTRA CREDIT]
              =================================

---- DATA STRUCTURES ----

>> C1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.

---- ALGORITHMS ----

>> C2: Suppose threads A, B, and C have nice values 0, 1, and 2.  Each
>> has a recent_cpu value of 0.  Fill in the table below showing the
>> scheduling decision and the priority and recent_cpu values for each
>> thread after each given number of timer ticks:

timer  recent_cpu    priority   thread
ticks   A   B   C   A   B   C   to run
-----  --  --  --  --  --  --   ------
 0
 4
 8
12
16
20
24
28
32
36

>> C3: Did any ambiguities in the scheduler specification make values
>> in the table uncertain?  If so, what rule did you use to resolve
>> them?  Does this match the behavior of your scheduler?

>> C4: How is the way you divided the cost of scheduling between code
>> inside and outside interrupt context likely to affect performance?

---- RATIONALE ----

>> C5: Briefly critique your design, pointing out advantages and
>> disadvantages in your design choices.  If you were to have extra
>> time to work on this part of the project, how might you choose to
>> refine or improve your design?

